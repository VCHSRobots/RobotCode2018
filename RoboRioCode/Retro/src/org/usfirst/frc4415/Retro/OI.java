// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4415.Retro;

import org.usfirst.frc4415.Retro.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;
import org.usfirst.frc4415.Retro.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton retroDriveToggleButton;
    public JoystickButton retroClimberForwardButton;
    public JoystickButton retroClimberBackwardButton;
    public JoystickButton retroClawOpenButton;
    public JoystickButton retroClawCloseButton;
    public JoystickButton retroWedgeArmUpButton;
    public JoystickButton retroWedgeArmDownButton;
    public Joystick retroStick;
    public JoystickButton retroTelescopeDownButton;
    public JoystickButton retroTelescopeUpButton;
    public JoystickButton retroWedgeArmUpButton2;
    public JoystickButton retroWedgeArmDownButton2;
    public JoystickButton retroClawUpButton;
    public JoystickButton retroClawDownButton;
    public Joystick retroStick2;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        retroStick2 = new Joystick(1);
        
        retroClawDownButton = new JoystickButton(retroStick2, 6);
        retroClawDownButton.whileHeld(new RetroClawDown());
        retroClawUpButton = new JoystickButton(retroStick2, 5);
        retroClawUpButton.whileHeld(new RetroClawUp());
        retroWedgeArmDownButton2 = new JoystickButton(retroStick2, 1);
        retroWedgeArmDownButton2.whileHeld(new RetroWedgeArmDown());
        retroWedgeArmUpButton2 = new JoystickButton(retroStick2, 2);
        retroWedgeArmUpButton2.whileHeld(new RetroWedgeArmUp());
        retroTelescopeUpButton = new JoystickButton(retroStick2, 3);
        retroTelescopeUpButton.whileHeld(new RetroTelescopeUp());
        retroTelescopeDownButton = new JoystickButton(retroStick2, 4);
        retroTelescopeDownButton.whileHeld(new RetroTelescopeDown());
        retroStick = new Joystick(0);
        
        retroWedgeArmDownButton = new JoystickButton(retroStick, 3);
        retroWedgeArmDownButton.whileHeld(new RetroWedgeArmDown());
        retroWedgeArmUpButton = new JoystickButton(retroStick, 4);
        retroWedgeArmUpButton.whileHeld(new RetroWedgeArmUp());
        retroClawCloseButton = new JoystickButton(retroStick, 2);
        retroClawCloseButton.whenPressed(new RetroClawClose());
        retroClawOpenButton = new JoystickButton(retroStick, 1);
        retroClawOpenButton.whenPressed(new RetroClawOpen());
        retroClimberBackwardButton = new JoystickButton(retroStick, 8);
        retroClimberBackwardButton.whileHeld(new RetroClimberBackward());
        retroClimberForwardButton = new JoystickButton(retroStick, 6);
        retroClimberForwardButton.whileHeld(new RetroClimberForward());
        retroDriveToggleButton = new JoystickButton(retroStick, 5);
        retroDriveToggleButton.whenPressed(new RetroDriveToggle());


        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("Auto Switch", new AutoSwitch());
        SmartDashboard.putData("RetroDrive Default", new RetroDriveDefault());
        SmartDashboard.putData("RetroDrive Toggle", new RetroDriveToggle());
        SmartDashboard.putData("RetroClimber Default", new RetroClimberDefault());
        SmartDashboard.putData("RetroClimber Forward", new RetroClimberForward());
        SmartDashboard.putData("RetroClimber Backward", new RetroClimberBackward());
        SmartDashboard.putData("RetroTelescope Up", new RetroTelescopeUp());
        SmartDashboard.putData("RetroTelescope Down", new RetroTelescopeDown());
        SmartDashboard.putData("RetroClaw Open", new RetroClawOpen());
        SmartDashboard.putData("RetroClaw Close", new RetroClawClose());
        SmartDashboard.putData("RetroClaw Up", new RetroClawUp());
        SmartDashboard.putData("RetroClaw Down", new RetroClawDown());
        SmartDashboard.putData("RetroWedgeArm Up", new RetroWedgeArmUp());
        SmartDashboard.putData("RetroWedgeArm Down", new RetroWedgeArmDown());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getRetroStick() {
        return retroStick;
    }

    public Joystick getRetroStick2() {
        return retroStick2;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

