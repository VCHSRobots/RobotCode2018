// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4415.Steam.subsystems;

import java.util.concurrent.TimeUnit;

import org.usfirst.frc4415.Steam.OI;
import org.usfirst.frc4415.Steam.Robot;
import org.usfirst.frc4415.Steam.RobotMap;
import org.usfirst.frc4415.Steam.commands.*;
import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.RobotDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class PIDSub extends PIDSubsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final WPI_TalonSRX leftFront = RobotMap.pIDSubleftFront;
    private final WPI_TalonSRX rightFront = RobotMap.pIDSubrightFront;
    private final WPI_TalonSRX leftRear = RobotMap.pIDSubleftRear;
    private final WPI_TalonSRX rightRear = RobotMap.pIDSubrightRear;
    private final RobotDrive robotDrive4 = RobotMap.pIDSubRobotDrive4;
    private final Encoder quadratureEncoder1 = RobotMap.pIDSubQuadratureEncoder1;
    private final DoubleSolenoid doubleSolenoid1 = RobotMap.pIDSubDoubleSolenoid1;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    public boolean PIDEnabled = false;
    public boolean toggleDrive = true;
    
    public float totalTicks = 0;
    public double totalError = 0;
    public double prevError = 0;
    public long prevTicks = 0;

    // Initialize your subsystem here
    public PIDSub() {
       
        super("PIDSub", .005, 0, .01);
        setAbsoluteTolerance(0.2);
        getPIDController().setContinuous(false);
        LiveWindow.addActuator("PID Sub", "PIDSubsystem Controller", getPIDController());

        System.out.println(this.quadratureEncoder1.getDistance());
        

        // Use these to get going:
        // setSetpoint() -  Sets where the PID controller should move the system
        //                  to
        // enable() - Enables the PID controller.
        
        //this.setSetpoint(1000);
        //this.enable();
        
    }
    
    @Override
    public void enable() {
      super.enable();
      
      PIDEnabled = true;
      prevTicks = System.currentTimeMillis();
    }
    
    @Override
    public void disable() {
    	super.disable();
    	
    	PIDEnabled = false;
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new PIDSubDrive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }

    @Override
    protected double returnPIDInput() {
        // Return your input value for the PID loop
        // e.g. a sensor, like a potentiometer:
        // yourPot.getAverageVoltage() / kYourMaxVoltage;

    	return this.quadratureEncoder1.getDistance();
    	
    }

    @Override
    protected void usePIDOutput(double output) {
        // Use output to drive your system, like a motor
        // e.g. yourMotor.set(output);
    	
double changeInError = (this.getPIDController().getError() - prevError) / (System.currentTimeMillis() - prevTicks);
    	
    	totalError = totalError + this.getPIDController().getError();
    	totalError = totalError * 0.99;
    	
    	//System.out.println("ERRROR " + String.valueOf(totalError));
    	
    	
    	double newOutput = this.getPIDController().getError() * this.getPIDController().getP() + totalError * this.getPIDController().getI() + changeInError * this.getPIDController().getD();
    	newOutput = clamp(newOutput, -1, 1);
    	
        /*leftRear.pidWrite(newOutput);
        rightFront.pidWrite(newOutput);
		leftRear.pidWrite(newOutput);
		rightRear.pidWrite(newOutput);*/
		
        prevError = this.getPIDController().getError();
 
        prevTicks = System.currentTimeMillis();
        
        newOutput = output;
        output = 1 * output;
        
        leftFront.pidWrite(-1 * output);
        rightFront.pidWrite(output);
        leftRear.pidWrite(-1 * output);
        rightRear.pidWrite(output);
        
        System.out.println("Voltage " + output);
        System.out.println("Encoder Value         " + quadratureEncoder1.get());
        System.out.println("PIDEnabled " + PIDEnabled);
   
    }
    
    //PIDLoop Functions
    
    public void driveSetpoint(double setpoint) {
    	setSetpoint(setpoint);
    	
    	long seconds = (long) Math.abs(setpoint * (1/150));
    	
    	System.out.println("Seconds " + seconds);
    	
    	try {
			TimeUnit.SECONDS.sleep(seconds);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
   
    }
    
    public void driveDistance(double distance) {
    	distance = 3.77 * quadratureEncoder1.get();
    	
    	setSetpoint(distance);
    }
    
    public void arcadeDrive() {
    	//RobotMap.pIDSubleftFront.setInverted(false); //change to true for Retro - Steamworks
    	//RobotMap.pIDSubleftRear.setInverted(false);
    	robotDrive4.arcadeDrive(Robot.oi.getSteamJoystick().getRawAxis(1), Robot.oi.getSteamJoystick().getRawAxis(4));
    }
    
    public void togglePIDSubDrive() {
    	toggleDrive = !toggleDrive;
    	
    	if (toggleDrive == true) {
    		doubleSolenoid1.set(DoubleSolenoid.Value.kReverse);
    	} else if (toggleDrive == false) {
    		doubleSolenoid1.set(DoubleSolenoid.Value.kForward);
    	}
    }
    
    public void resetEncoder() {
    	quadratureEncoder1.reset();
    }

	private double clamp(double newOutput, int d, int e) {
		// TODO Auto-generated method stub
		return 0;
	}
}
