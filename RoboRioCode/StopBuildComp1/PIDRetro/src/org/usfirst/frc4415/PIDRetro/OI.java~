// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4415.PIDRetro;

import org.usfirst.frc4415.PIDRetro.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;

import org.usfirst.frc4415.PIDRetro.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton wedgeArmUpButton;
    public JoystickButton wedgeArmDownButton;
    public Joystick driverJoystick;
    public JoystickButton deliverSwitchGroupButton;
    public JoystickButton startingPositionGroupButton;
    public JoystickButton telescopeClimbUpGroupButton;
    public JoystickButton telescopeClimbDownGroupButton;
    public Joystick manipulatorJoystick;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        manipulatorJoystick = new Joystick(1);
        
        telescopeClimbDownGroupButton = new JoystickButton(manipulatorJoystick, 4);
        telescopeClimbDownGroupButton.whileHeld(new TelescopeClimbDownGroup());
        telescopeClimbUpGroupButton = new JoystickButton(manipulatorJoystick, 3);
        telescopeClimbUpGroupButton.whileHeld(new TelescopeClimbUpGroup());
        startingPositionGroupButton = new JoystickButton(manipulatorJoystick, 2);
        startingPositionGroupButton.whenPressed(new StartingPositionGroup());
        deliverSwitchGroupButton = new JoystickButton(manipulatorJoystick, 1);
        deliverSwitchGroupButton.whenPressed(new DeliverSwitchGroup());
        driverJoystick = new Joystick(0);
        
        wedgeArmDownButton = new JoystickButton(driverJoystick, 6);
        wedgeArmDownButton.whileHeld(new WedgeArmDown());
        wedgeArmUpButton = new JoystickButton(driverJoystick, 5);
        wedgeArmUpButton.whileHeld(new WedgeArmUp());


        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("DriveTrain Default", new DriveTrainDefault());
        SmartDashboard.putData("Claw Default", new ClawDefault());
        SmartDashboard.putData("WedgeArm Default", new WedgeArmDefault());
        SmartDashboard.putData("Climber Default", new ClimberDefault());
        SmartDashboard.putData("Telescope Default", new TelescopeDefault());
        SmartDashboard.putData("DeliverSwitchGroup", new DeliverSwitchGroup());
        SmartDashboard.putData("DeliverSwitchTelescope Timed", new DeliverSwitchTelescopeTimed());
        SmartDashboard.putData("DeliverSwitchWedgeArm PID", new DeliverSwitchWedgeArmPID());
        SmartDashboard.putData("StartingPositionGroup", new StartingPositionGroup());
        SmartDashboard.putData("StartingPositionTelescope Timed", new StartingPositionTelescopeTimed());
        SmartDashboard.putData("StartingPositionWedgeArm PID", new StartingPositionWedgeArmPID());
        SmartDashboard.putData("TelescopeClimbUp Group", new TelescopeClimbUpGroup());
        SmartDashboard.putData("TelescopeClimbUp TelescopeUp", new TelescopeClimbUpTelescopeUp());
        SmartDashboard.putData("TelescopeClimbUp ClimbUp", new TelescopeClimbUpClimbUp());
        SmartDashboard.putData("TelescopeClimbDown Group", new TelescopeClimbDownGroup());
        SmartDashboard.putData("TelescopeClimbDown TelescopeDown", new TelescopeClimbDownTelescopeDown());
        SmartDashboard.putData("TelescopeClimbDown ClimbDown", new TelescopeClimbDownClimbDown());
        SmartDashboard.putData("WedgeArm Up", new WedgeArmUp());
        SmartDashboard.putData("WedgeArm Down", new WedgeArmDown());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getDriverJoystick() {
        return driverJoystick;
    }

    public Joystick getManipulatorJoystick() {
        return manipulatorJoystick;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

