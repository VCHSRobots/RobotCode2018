// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4415.PIDRetro.subsystems;

import org.usfirst.frc4415.PIDRetro.RobotMap;
import org.usfirst.frc4415.PIDRetro.commands.*;
import org.usfirst.frc4415.PIDRetro.OI;
import org.usfirst.frc4415.PIDRetro.Robot;

import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.RobotDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class DriveTrainPID extends PIDSubsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final WPI_TalonSRX leftFront = RobotMap.driveTrainPIDleftFront;
    private final WPI_TalonSRX rightFront = RobotMap.driveTrainPIDrightFront;
    private final WPI_TalonSRX leftRear = RobotMap.driveTrainPIDleftRear;
    private final WPI_TalonSRX rightRear = RobotMap.driveTrainPIDrightRear;
    private final RobotDrive robotDrive4 = RobotMap.driveTrainPIDRobotDrive4;
    private final Encoder quadratureEncoder1 = RobotMap.driveTrainPIDQuadratureEncoder1;
    private final DoubleSolenoid doubleSolenoid1 = RobotMap.driveTrainPIDDoubleSolenoid1;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    public boolean PIDEnabled = false;
    public boolean toggleDrive = true;
    
    private float totalTicks = 0;
    private double totalError = 0;
    private double prevError = 0;
    public long prevTicks = 0;

    // Initialize your subsystem here
    public DriveTrainPID() {
       
        super("DriveTrainPID", .008, 0.001, 0.05);
        setAbsoluteTolerance(0.2);
        getPIDController().setContinuous(false);
        LiveWindow.addActuator("DriveTrainPID", "PIDSubsystem Controller", getPIDController());

    

        // Use these to get going:
        // setSetpoint() -  Sets where the PID controller should move the system
        //                  to
        // enable() - Enables the PID controller.
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new DriveTrainDefault());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    
    @Override
    public void enable() {
      super.enable();
      
      PIDEnabled = true;
      prevTicks = System.currentTimeMillis();
    }
    
    @Override
    public void disable() {
    	super.disable();
    	
    	PIDEnabled = false;
    }

    @Override
    protected double returnPIDInput() {
        // Return your input value for the PID loop
        // e.g. a sensor, like a potentiometer:
        // yourPot.getAverageVoltage() / kYourMaxVoltage;

        return quadratureEncoder1.getDistance();

    }

    @Override
    protected void usePIDOutput(double output) {
        // Use output to drive your system, like a motor
        // e.g. yourMotor.set(output);

    	double changeInError = (this.getPIDController().getError() - prevError) / (System.currentTimeMillis() - prevTicks);
    	
    	totalError = totalError + this.getPIDController().getError();
    	totalError = totalError * 0.99;
    	
    	double newOutput = this.getPIDController().getError() * this.getPIDController().getP() + totalError * this.getPIDController().getI() + changeInError * this.getPIDController().getD();
    	newOutput = clamp(newOutput, -1, 1);
		
        prevError = this.getPIDController().getError();
 
        prevTicks = System.currentTimeMillis();
        
        newOutput = output;
        output = .5 * output;
        
        leftFront.pidWrite(-1 * output);
        rightFront.pidWrite(output);
        leftRear.pidWrite(-1 * output);
        rightRear.pidWrite(output);
        
        /*System.out.println("Driver Voltage " + output);
        System.out.println("Driver Encoder Value     " + quadratureEncoder1.get());
        System.out.println("Driver PIDEnabled " + PIDEnabled);*/

    }
    
    public void resetEncoder() {
    	quadratureEncoder1.reset();
    }
    
    public void arcadeDrive() {
    	//RobotMap.pIDSubleftFront.setInverted(false); //change to true for Retro - Steamworks
    	//RobotMap.pIDSubleftRear.setInverted(false);
    	robotDrive4.arcadeDrive(-1 * Robot.oi.getDriverJoystick().getRawAxis(1), -1 * Robot.oi.getDriverJoystick().getRawAxis(4));
    }
    
    public void driveTrainToggle() {
    	toggleDrive = !toggleDrive;
    	
    	if (toggleDrive == true) {
    		doubleSolenoid1.set(DoubleSolenoid.Value.kReverse);
    	} else if (toggleDrive == false) {
    		doubleSolenoid1.set(DoubleSolenoid.Value.kForward);
    	}
    }

	private double clamp(double newOutput, int i, int j) {
		// TODO Auto-generated method stub
		return 0;
	}
}
