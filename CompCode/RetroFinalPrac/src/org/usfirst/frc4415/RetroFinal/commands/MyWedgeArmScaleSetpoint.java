// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4415.RetroFinal.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc4415.RetroFinal.Robot;

/**
 *
 */
public class MyWedgeArmScaleSetpoint extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
	
	private boolean limit = false;
	
	public int setpoint;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public MyWedgeArmScaleSetpoint() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        
        requires(Robot.wedgeArmPID);
        requires(Robot.clawPID);
        
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
    	
    	setpoint = 105;
    	
    	Robot.wedgeArmPID.setSetpoint(setpoint);
		Robot.wedgeArmPID.enable();
		
		Robot.clawPID.setSetpoint(70);
		Robot.clawPID.enable();

		if (Robot.wedgeArmPID.getEncoder() > setpoint * .9 && Robot.wedgeArmPID.getEncoder() < setpoint * 1.1) {
			limit = true;
		}
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return limit;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    	limit = false;
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    	limit = false;
    }
}
