// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4415.RetroFinal.commands;

import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.command.CommandGroup;

import java.util.concurrent.TimeUnit;

import org.usfirst.frc4415.RetroFinal.Robot;
import org.usfirst.frc4415.RetroFinal.subsystems.*;

/**
 *
 */
public class AutoLeftSwitchCommandGroup extends CommandGroup {
	
	String gameData;


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
    public AutoLeftSwitchCommandGroup() {
    	//setRunWhenDisabled(true);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
        // Add Commands here:
        // e.g. addSequential(new Command1());
        //      addSequential(new Command2());
        // these will run in order.

        // To run multiple commands at the same time,
        // use addParallel()
        // e.g. addParallel(new Command1());
        //      addSequential(new Command2());
        // Command1 and Command2 will run in parallel.

        // A command group will require all of the subsystems that each member
        // would require.
        // e.g. if Command1 requires chassis, and Command2 requires arm,
        // a CommandGroup containing them would require both the chassis and the
        // arm.
        
       gameData = DriverStation.getInstance().getGameSpecificMessage();
       
       if (gameData.length() > 0) {
   		
   			// Left Switch
   			if (gameData.charAt(0) == 'L') {
   				
   				/*Robot.driveTrainPID.driveForwardGyroSetpoint(550);
   				//addSequential (new DriveForwardSwitchCommandGroup());
   				addSequential (new BoundedWristSetpoint());
   		        addSequential(new MyWedgeArmSwitchSetpoint());
   		        addParallel (new DriveForwardGyroCommand());
   		        addParallel (new MyWristSwitchSetpoint());
   				addSequential (new ThrowTheCubeCommandGroup());*/
   				
   				  addSequential (new SwitchGroup());
   				  addSequential (new DriveForwardGyroCommand());
   				  addSequential (new ThrowTheCubeCommandGroup());
   				  //Robot.driveTrainPID.driveForwardGyroSetpoint(550);
   				 
   				
   				//addSequential (new ResetDriveBackwardCommandGroup());
   				
   			} else {
   				//Robot.driveTrainPID.driveForwardGyroSetpoint(550);
   				addSequential (new DriveForwardGyroCommand());
   			}
   		
   			// Right Switch
   			/*if (gameData.charAt(0) == 'R') {
   				
   				Robot.driveTrainPID.driveForwardGyroSetpoint(550);
   				
   				/*addSequential (new RightSwerveCommandGroup());
   				addSequential (new ThrowTheCubeCommandGroup());
   				addSequential (new ResetDriveBackwardCommandGroup());
   				
   			}*/
   			
       }
    } 
}
