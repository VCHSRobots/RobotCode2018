// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4415.RetroFinal.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc4415.RetroFinal.Robot;

/**
 *
 */
public class TelescopeDefault extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
	
	private boolean telescopeAxisEnabled = false;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public TelescopeDefault() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.telescopePID);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
    	
    	/*if (Robot.oi.getDriverJoystick().getPOV() == -1) {
    		Robot.telescopePID.telescopeOff();
    	} else {
    		Robot.telescopePID.telescopeUpPOV();
    		Robot.telescopePID.telescopeDownPOV();
    	}*/
    	if (Robot.telescopePID.getEncoder() <= 430) {
    		if (Robot.oi.getManipulatorJoystick().getRawButton(1) || Robot.oi.getManipulatorJoystick().getRawButton(2)) {
        		Robot.telescopePID.disable();
        	}
    	}
    	
    	/*if (Robot.telescopePID.getLimitSwitch1() == false) {
    		Robot.telescopePID.resetEncoder();
    		Robot.telescopePID.enable();
    		Robot.telescopePID.setSetpoint(20);   //was 40
    		
    	}*/
    	
    	if (Robot.telescopePID.getEncoder() >= 437) {    // was 378
    		Robot.telescopePID.enable();
    		Robot.telescopePID.setSetpoint(437);
    	}
    	
    	if (Robot.oi.getManipulatorJoystick().getRawAxis(5) > .2 && telescopeAxisEnabled == true) {
    		Robot.telescopePID.telescopeDownHalf();
    		telescopeAxisEnabled = false;
    	
    	} 
    	
    	if (Robot.oi.getManipulatorJoystick().getRawAxis(5) < .1 && telescopeAxisEnabled == false) {
    		Robot.telescopePID.telescopeOff();
    		telescopeAxisEnabled = true;
    		
    	}
    	
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }
}
