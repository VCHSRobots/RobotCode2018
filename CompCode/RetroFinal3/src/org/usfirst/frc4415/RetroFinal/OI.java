// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4415.RetroFinal;

import org.usfirst.frc4415.RetroFinal.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;
import org.usfirst.frc4415.RetroFinal.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton clawCloseButton;
    public JoystickButton clawOpenButton;
    public JoystickButton climberPneuUpButton;
    public JoystickButton climberPneuDownButton;
    public JoystickButton switchGroupButton;
    public JoystickButton scaleGroupButton;
    public JoystickButton resetGroupButton;
    public Joystick driverJoystick;
    public JoystickButton wristUpButton;
    public JoystickButton wristDownButton;
    public JoystickButton wristResetUpButton;
    
    public JoystickButton wedgeArmUpButton;
    public JoystickButton wedgeArmDownButton;
    public JoystickButton telescopeUpButton;
    public JoystickButton telescopeDownButton;
    public Joystick manipulatorJoystick;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    public JoystickButton wheelInButton;
    public JoystickButton wheelOutButton;
    public JoystickButton enableWedgeArmPIDButton;
    public JoystickButton enableTelescopePIDButton;
    public JoystickButton disableClawButton;

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        manipulatorJoystick = new Joystick(1);
        
        telescopeDownButton = new JoystickButton(manipulatorJoystick, 2);
        telescopeDownButton.whileHeld(new TelescopeDown());   //change to TelescopeClimbDownGroup()   // was TelescopeDown
        telescopeUpButton = new JoystickButton(manipulatorJoystick, 1);
        telescopeUpButton.whileHeld(new TelescopeClimbUpGroup());     //change to TelescopeClimbUpGroup()
        /*enableTelescopePIDButton = new JoystickButton(manipulatorJoystick, 1);
        enableTelescopePIDButton.whenReleased(new EnableTelescopePID());*/
        
        wedgeArmDownButton = new JoystickButton(manipulatorJoystick, 6);
        wedgeArmDownButton.whileHeld(new WedgeArmDown());
        wedgeArmUpButton = new JoystickButton(manipulatorJoystick, 5);
        wedgeArmUpButton.whileHeld(new WedgeArmUp());
        wristDownButton = new JoystickButton(manipulatorJoystick, 4);
        wristDownButton.whileHeld(new WristDown());
        wristUpButton = new JoystickButton(manipulatorJoystick, 3);
        wristUpButton.whileHeld(new WristUp());
        climberPneuDownButton = new JoystickButton(manipulatorJoystick, 8);
        climberPneuDownButton.whenPressed(new ClimberPneuDown());
        climberPneuUpButton = new JoystickButton(manipulatorJoystick, 7);
        climberPneuUpButton.whenPressed(new ClimberClamp());
        
        
        driverJoystick = new Joystick(0);
        
        resetGroupButton = new JoystickButton(driverJoystick, 3);
        resetGroupButton.whenPressed(new ResetGroup());
        scaleGroupButton = new JoystickButton(driverJoystick, 4);
        scaleGroupButton.whenPressed(new BoundedWristSetpoint());    // was ScaleGroup()
        //disableClawButton = new JoystickButton (driverJoystick, 4);
        //disableClawButton.whenReleased(new DisableClawPID());
        switchGroupButton = new JoystickButton(driverJoystick, 1);
        switchGroupButton.whenPressed(new SwitchGroup());
        //climberPneuDownButton = new JoystickButton(driverJoystick, 8);
        //climberPneuDownButton.whenPressed(new ClimberPneuDown());
        //climberPneuUpButton = new JoystickButton(driverJoystick, 7);
        //climberPneuUpButton.whenPressed(new ClimberClamp());
        wristResetUpButton = new JoystickButton(driverJoystick, 7);
        wristResetUpButton.whenPressed(new WristResetUp());
        clawOpenButton = new JoystickButton(driverJoystick, 6);
        clawOpenButton.whenReleased(new ClawOpen());
        clawCloseButton = new JoystickButton(driverJoystick, 5);
        clawCloseButton.whenReleased(new ClawClose());
        
        wheelInButton = new JoystickButton(driverJoystick, 5);
        wheelInButton.whileHeld(new WheelIn());
        wheelOutButton = new JoystickButton(driverJoystick, 6);
        wheelOutButton.whileHeld(new WheelOut());
        enableWedgeArmPIDButton = new JoystickButton(manipulatorJoystick, 5);
        enableWedgeArmPIDButton.whenReleased(new EnableWedgeArmPID());
        enableWedgeArmPIDButton = new JoystickButton(manipulatorJoystick, 6);
        enableWedgeArmPIDButton.whenReleased(new EnableWedgeArmPID());
        
        
        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("Auto Command", new AutoCommand());
        SmartDashboard.putData("DriveTrain Default", new DriveTrainDefault());
        //SmartDashboard.putData("DriveTrain Setpoint", new DriveTrainSetpoint());
        SmartDashboard.putData("Claw Default", new ClawDefault());
        SmartDashboard.putData("Wrist Up", new WristUp());
        SmartDashboard.putData("Wrist Down", new WristDown());
        //SmartDashboard.putData("Wrist Setpoint", new WristSetpoint());
        SmartDashboard.putData("Wheel In", new WheelIn());
        SmartDashboard.putData("Wheel Out", new WheelOut());
        SmartDashboard.putData("Claw Open", new ClawOpen());
        SmartDashboard.putData("Claw Close", new ClawClose());
        SmartDashboard.putData("WedgeArm Default", new WedgeArmDefault());
        SmartDashboard.putData("WedgeArm Up", new WedgeArmUp());
        SmartDashboard.putData("WedgeArm Down", new WedgeArmDown());
        //SmartDashboard.putData("WedgeArm Setpoint", new WedgeArmSetpoint());
        SmartDashboard.putData("Climber Default", new ClimberDefault());
        SmartDashboard.putData("Climber Up", new ClimberUp());
        SmartDashboard.putData("Climber Down", new ClimberDown());
        SmartDashboard.putData("Climber Pneu Up", new ClimberPneuUp());
        SmartDashboard.putData("Climber Pneu Down", new ClimberPneuDown());
        SmartDashboard.putData("Telescope Default", new TelescopeDefault());
        SmartDashboard.putData("Telescope Up", new TelescopeUp());
        SmartDashboard.putData("Telescope Down", new TelescopeDown());
        //SmartDashboard.putData("Telescope Setpoint", new TelescopeSetpoint());
        SmartDashboard.putData("TelescopeClimb Up Group", new TelescopeClimbUpGroup());
        SmartDashboard.putData("TC Up  Group Telescope Up", new TCUpGroupTelescopeUp());
        SmartDashboard.putData("TC Up Group Climber Unreal", new TCUpGroupClimberUnreal());
        SmartDashboard.putData("TelescopeClimb Down Group", new TelescopeClimbDownGroup());
        SmartDashboard.putData("TC Down Group Telescope Down", new TCDownGroupTelescopeDown());
        SmartDashboard.putData("TC Down Group Climber Real", new TCDownGroupClimberReal());
        SmartDashboard.putData("Switch Group", new SwitchGroup());
        SmartDashboard.putData("Scale Group", new ScaleGroup());
        SmartDashboard.putData("Reset Group", new ResetGroup());
        SmartDashboard.putData("Disable WedgeArm", new DisableWedgeArm());
        SmartDashboard.putData("WristSetpoint Timed", new WristSetpointTimed());
        SmartDashboard.putData("MyDriveTrainSetpoint", new MyDriveTrainSetpoint());
        SmartDashboard.putData("MyWristSetpoint", new MyWristSetpoint());
        SmartDashboard.putData("MyWedgeArmSetpoint", new MyWedgeArmSetpoint());
        SmartDashboard.putData("MyTelescopeSetpoint", new MyTelescopeSetpoint());
        SmartDashboard.putData("MyWristSwitchSetpoint", new MyWristSwitchSetpoint());
        SmartDashboard.putData("MyWedgeArmSwitchSetpoint", new MyWedgeArmSwitchSetpoint());
        SmartDashboard.putData("MyTelescopeSwitchSetpoint", new MyTelescopeSwitchSetpoint());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getDriverJoystick() {
        return driverJoystick;
    }

    public Joystick getManipulatorJoystick() {
        return manipulatorJoystick;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

